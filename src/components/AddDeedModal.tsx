import React, { useState, useEffect, useRef } from 'react';

const PRESET_DEEDS = [
  { icon: '‚ù§Ô∏è', text: '–°–¥–µ–ª–∞–ª –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç' },
  { icon: 'ü§ù', text: '–ü–æ–º–æ–≥ –¥—Ä—É–≥—É' },
  { icon: 'üìö', text: '–ü—Ä–æ—á–∏—Ç–∞–ª –∫–Ω–∏–≥—É' },
  { icon: 'üåü', text: '–ü–æ–¥–µ–ª–∏–ª—Å—è –∏–≥—Ä—É—à–∫–æ–π' },
  { icon: 'üßπ', text: '–£–±—Ä–∞–ª –≤ –∫–æ–º–Ω–∞—Ç–µ' },
  { icon: 'üçè', text: '–°—ä–µ–ª –ø–æ–ª–µ–∑–Ω—É—é –µ–¥—É' },
  { icon: 'ü¶Æ', text: '–ü–æ–≥—É–ª—è–ª —Å –ø–∏—Ç–æ–º—Ü–µ–º' },
  { icon: 'üß∏', text: '–ü–æ–∏–≥—Ä–∞–ª —Å –º–ª–∞–¥—à–∏–º' },
  { icon: 'üìù', text: '–°–¥–µ–ª–∞–ª –¥–æ–º–∞—à–∫—É' },
  { icon: 'üå≥', text: '–ü–æ—Å–∞–¥–∏–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ' },
  { icon: 'ü¶∑', text: '–ü–æ—á–∏—Å—Ç–∏–ª –∑—É–±—ã' },
  { icon: 'üßë‚Äçüç≥', text: '–ü–æ–º–æ–≥ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –µ–¥—É' },
  { icon: 'üß∫', text: '–ü–æ–º–æ–≥ —Å –±–µ–ª—å—ë–º' },
  { icon: 'üßº', text: '–ü–æ–º—ã–ª —Ä—É–∫–∏' },
  { icon: 'üö≤', text: '–ü–æ–∫–∞—Ç–∞–ª—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ' },
  { icon: 'üé®', text: '–ù–∞—Ä–∏—Å–æ–≤–∞–ª –∫–∞—Ä—Ç–∏–Ω—É' },
  { icon: 'üéµ', text: '–ü–æ–∏–≥—Ä–∞–ª –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ' },
  { icon: 'üõí', text: '–°—Ö–æ–¥–∏–ª –≤ –º–∞–≥–∞–∑–∏–Ω' },
  { icon: 'üí°', text: '–ü—Ä–∏–¥—É–º–∞–ª —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ' },
  { icon: 'ü¶∏‚Äç‚ôÇÔ∏è', text: '–°–¥–µ–ª–∞–ª –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ' },
];

const EMOJI_LIST = [
  'üòä', 'üòÉ', 'üòá', 'üê∂', 'üê±', 'ü¶Ñ', 'üöÄ', 'üåà', 'üç≠', 'üçé',
  'üß∏', 'üé®', 'üéà', 'üèÜ', 'üí°', 'ü§ó', 'üëë', 'ü¶ã', 'üåª', '‚≠ê',
  'üçÄ', 'ü•á', 'üîë', 'ü¶ä', 'üêª', 'üê∞', 'ü¶â', 'üê¢', 'üê•', 'üê¢',
];

interface AddDeedModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (icon: string, text: string) => void;
}

function PresetDeedsList({ selected, setSelected, setCustomText, setCustomIcon }: {
  selected: number | null;
  setSelected: (n: number | null) => void;
  setCustomText: (s: string) => void;
  setCustomIcon: (s: string) => void;
}) {
  return (
    <div className="grid grid-cols-2 gap-6 justify-center mb-6">
      {PRESET_DEEDS.map((deed, idx) => (
        <button
          key={idx}
          className={`px-6 py-3 rounded-2xl border text-lg flex items-center gap-4 font-medium transition hover:scale-105 active:scale-95 ${
            selected === idx
              ? 'bg-yellow-100 border-yellow-400 text-yellow-800'
              : 'bg-blue-100 border-blue-200 text-blue-800 hover:bg-yellow-50'
          }`}
          onClick={() => {
            setSelected(idx);
            setCustomText('');
            setCustomIcon('');
          }}
        >
          <span>{deed.icon}</span>
          <span>{deed.text}</span>
        </button>
      ))}
    </div>
  );
}

function EmojiPicker({ customIcon, setCustomIcon, setSelected }: {
  customIcon: string;
  setCustomIcon: (s: string) => void;
  setSelected: (n: number | null) => void;
}) {
  return (
    <div className="grid grid-cols-6 gap-5">
      {EMOJI_LIST.map((emoji, idx) => (
        <button
          key={idx}
          type="button"
          className={`text-2xl p-4 rounded-xl border transition hover:scale-110 active:scale-95 ${
            customIcon === emoji
              ? 'bg-yellow-100 border-yellow-400 text-yellow-800 scale-110'
              : 'bg-blue-100 border-blue-200 text-blue-800 hover:bg-yellow-50'
          }`}
          onClick={() => {
            setCustomIcon(emoji);
            setSelected(null);
          }}
        >
          {emoji}
        </button>
      ))}
    </div>
  );
}

export default function AddDeedModal({ isOpen, onClose, onSave }: AddDeedModalProps) {
  const [selected, setSelected] = useState<number | null>(null);
  const [customText, setCustomText] = useState('');
  const [customIcon, setCustomIcon] = useState('');
  const modalRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);

  useEffect(() => {
    if (!isOpen) return;
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') onClose();
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [isOpen, onClose]);

  const handleBackdropClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if (e.target === modalRef.current) {
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 bg-black/40 flex items-center justify-center z-50"
      role="dialog"
      aria-modal="true"
      ref={modalRef}
      onClick={handleBackdropClick}
    >
      <div className="bg-white rounded-3xl p-6 w-96 max-w-full max-h-[85vh] flex flex-col items-center overflow-y-auto shadow-2xl">
        <h2 className="text-2xl font-bold text-blue-800 mb-6">–ß—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ —Ç—ã —Å–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è?</h2>
        <PresetDeedsList selected={selected} setSelected={setSelected} setCustomText={setCustomText} setCustomIcon={setCustomIcon} />
        <div className="w-full flex flex-col gap-4 mb-6">
          <input
            ref={inputRef}
            type="text"
            placeholder="–°–≤–æ–µ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ..."
            className="border rounded-lg px-3 py-2 text-base"
            value={customText}
            onChange={(e) => {
              setCustomText(e.target.value);
              setSelected(null);
            }}
            maxLength={40}
          />
          <EmojiPicker customIcon={customIcon} setCustomIcon={setCustomIcon} setSelected={setSelected} />
          <input
            type="text"
            placeholder="–∏–ª–∏ —Å–≤–æ–π üòä"
            className="border rounded-lg px-3 py-2 text-base"
            value={customIcon}
            onChange={(e) => {
              setCustomIcon(e.target.value);
              setSelected(null);
            }}
            maxLength={2}
          />
        </div>
        <div className="flex gap-4 flex-wrap justify-center">
          <button
            className="bg-yellow-200 text-yellow-900 px-5 py-2 rounded-2xl font-bold hover:bg-yellow-300 shadow active:scale-95 transition"
            onClick={() => {
              if (selected !== null) {
                onSave(PRESET_DEEDS[selected].icon, PRESET_DEEDS[selected].text);
              } else if (customText && customIcon) {
                onSave(customIcon, customText);
              }
              onClose();
            }}
            disabled={selected === null && (!customText || !customIcon)}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
          <button
            className="bg-blue-100 text-blue-800 px-5 py-2 rounded-2xl font-bold hover:bg-blue-200 shadow active:scale-95 transition"
            onClick={onClose}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </div>
    </div>
  );
}
